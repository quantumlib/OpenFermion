#!/usr/bin/env bash

# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Summary: execute shellcheck for all shell scripts in this repository
#
# Usage:
#     check/shellcheck [--dry-run] [shellcheck-arguments]
#
# Use the '--dry-run' option to print out the shellcheck command line without
# running it.  This displays all shell script files found in the repository.

set -uo pipefail

# Change working directory to the repository root.
thisdir=$(dirname "${BASH_SOURCE[0]:?}")
repo_dir=$(git -C "${thisdir}" rev-parse --show-toplevel)
cd "${repo_dir}" || exit $?

# Process command line arguments
opt_dry_run=0
declare -a shellcheck_options
declare -a our_shell_scripts

for arg in "$@"; do
    if [[ "${arg}" == "--dry-run" ]]; then
        opt_dry_run=1
    else
        shellcheck_options+=( "${arg}" )
    fi
done

# Find all shell scripts in this repository.
IFS=$'\n' read -r -d '' -a our_shell_scripts <<< "$(
    git ls-files -z -- \
        ':(exclude)*.'{hdf5,ipynb,json,md,py,rst,toml,ts,txt,yaml} | \
    xargs -0 file | grep -i 'shell script' | cut -d: -f1
)"

# Verify our_shell_scripts array - require it must contain files below.
declare -a required_shell_scripts
required_shell_scripts=(
    # items below must be sorted
    check/format-incremental
    check/mypy
    check/pylint
    check/pytest
)

scripts_not_found=$(comm -13 \
    <(printf "%s\n" "${our_shell_scripts[@]}") \
    <(printf "%s\n" "${required_shell_scripts[@]}") )

if [[ -n "${scripts_not_found}" ]]; then
    echo "Identification of shell scripts failed - files not found:" >&2
    printf "\n%s\n\n" "${scripts_not_found}" >&2
    echo "Please fix $0." >&2
    exit 2
fi

# Ready to run here.
if (( opt_dry_run )); then
    printf '%s ' '>>' 'shellcheck' "${shellcheck_options[@]}"
    printf '\\\n  %s ' "${our_shell_scripts[@]}"
    printf '\\\n;\n'
else
    shellcheck "${shellcheck_options[@]}" "${our_shell_scripts[@]}"
fi
